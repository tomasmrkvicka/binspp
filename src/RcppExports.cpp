// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/binspp.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// addMat
NumericVector addMat(const NumericMatrix& m1, const NumericMatrix& m2);
RcppExport SEXP _binspp_addMat(SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(addMat(m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// multMat
NumericVector multMat(const NumericMatrix& m1, const NumericMatrix& m2);
RcppExport SEXP _binspp_multMat(SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(multMat(m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// intalphaC
double intalphaC(const List& z_beta, const double& alpha, const Nullable<NumericVector>& alphabet, const List& Wpix);
RcppExport SEXP _binspp_intalphaC(SEXP z_betaSEXP, SEXP alphaSEXP, SEXP alphabetSEXP, SEXP WpixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type z_beta(z_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const List& >::type Wpix(WpixSEXP);
    rcpp_result_gen = Rcpp::wrap(intalphaC(z_beta, alpha, alphabet, Wpix));
    return rcpp_result_gen;
END_RCPP
}
// aozC
double aozC(const List& z, const double& alpha, const Nullable<NumericVector>& alphabet, const NumericVector& u);
RcppExport SEXP _binspp_aozC(SEXP zSEXP, SEXP alphaSEXP, SEXP alphabetSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(aozC(z, alpha, alphabet, u));
    return rcpp_result_gen;
END_RCPP
}
// logpXCbetC
double logpXCbetC(const NumericMatrix& Y, const NumericMatrix& CC, const List& z_alpha, const List& z_omega, const double& alpha, const Nullable<NumericVector>& alphabet, const double& omega, const Nullable<NumericVector>& omegabet, const double& AreaW, const double& integral);
RcppExport SEXP _binspp_logpXCbetC(SEXP YSEXP, SEXP CCSEXP, SEXP z_alphaSEXP, SEXP z_omegaSEXP, SEXP alphaSEXP, SEXP alphabetSEXP, SEXP omegaSEXP, SEXP omegabetSEXP, SEXP AreaWSEXP, SEXP integralSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< const List& >::type z_alpha(z_alphaSEXP);
    Rcpp::traits::input_parameter< const List& >::type z_omega(z_omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const double& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type omegabet(omegabetSEXP);
    Rcpp::traits::input_parameter< const double& >::type AreaW(AreaWSEXP);
    Rcpp::traits::input_parameter< const double& >::type integral(integralSEXP);
    rcpp_result_gen = Rcpp::wrap(logpXCbetC(Y, CC, z_alpha, z_omega, alpha, alphabet, omega, omegabet, AreaW, integral));
    return rcpp_result_gen;
END_RCPP
}
// KumulaVsechC
double KumulaVsechC(const NumericMatrix& CC, const List& z_alpha, const List& z_omega, const double& alpha, const Nullable<NumericVector>& alphabet, const double& omega, const Nullable<NumericVector>& omegabet, const NumericVector& x_left, const NumericVector& x_right, const NumericVector& y_bottom, const NumericVector& y_top);
RcppExport SEXP _binspp_KumulaVsechC(SEXP CCSEXP, SEXP z_alphaSEXP, SEXP z_omegaSEXP, SEXP alphaSEXP, SEXP alphabetSEXP, SEXP omegaSEXP, SEXP omegabetSEXP, SEXP x_leftSEXP, SEXP x_rightSEXP, SEXP y_bottomSEXP, SEXP y_topSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< const List& >::type z_alpha(z_alphaSEXP);
    Rcpp::traits::input_parameter< const List& >::type z_omega(z_omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const double& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type omegabet(omegabetSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_left(x_leftSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_right(x_rightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y_bottom(y_bottomSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y_top(y_topSEXP);
    rcpp_result_gen = Rcpp::wrap(KumulaVsechC(CC, z_alpha, z_omega, alpha, alphabet, omega, omegabet, x_left, x_right, y_bottom, y_top));
    return rcpp_result_gen;
END_RCPP
}
// PrioralphaC
double PrioralphaC(const double& a, const double& Prior_alpha_mean, const double& Prior_alpha_SD);
RcppExport SEXP _binspp_PrioralphaC(SEXP aSEXP, SEXP Prior_alpha_meanSEXP, SEXP Prior_alpha_SDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type Prior_alpha_mean(Prior_alpha_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type Prior_alpha_SD(Prior_alpha_SDSEXP);
    rcpp_result_gen = Rcpp::wrap(PrioralphaC(a, Prior_alpha_mean, Prior_alpha_SD));
    return rcpp_result_gen;
END_RCPP
}
// PrioromegaC
double PrioromegaC(const double& o, const double& Prior_omega_mean, const double& Prior_omega_SD);
RcppExport SEXP _binspp_PrioromegaC(SEXP oSEXP, SEXP Prior_omega_meanSEXP, SEXP Prior_omega_SDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const double& >::type Prior_omega_mean(Prior_omega_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type Prior_omega_SD(Prior_omega_SDSEXP);
    rcpp_result_gen = Rcpp::wrap(PrioromegaC(o, Prior_omega_mean, Prior_omega_SD));
    return rcpp_result_gen;
END_RCPP
}
// PrioralphabetC
double PrioralphabetC(const Nullable<NumericVector>& a, const Nullable<NumericVector>& Prior_alphavec_SD);
RcppExport SEXP _binspp_PrioralphabetC(SEXP aSEXP, SEXP Prior_alphavec_SDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type Prior_alphavec_SD(Prior_alphavec_SDSEXP);
    rcpp_result_gen = Rcpp::wrap(PrioralphabetC(a, Prior_alphavec_SD));
    return rcpp_result_gen;
END_RCPP
}
// PrioromegabetC
double PrioromegabetC(const Nullable<NumericVector>& o, const Nullable<NumericVector>& Prior_omegavec_SD);
RcppExport SEXP _binspp_PrioromegabetC(SEXP oSEXP, SEXP Prior_omegavec_SDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type o(oSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type Prior_omegavec_SD(Prior_omegavec_SDSEXP);
    rcpp_result_gen = Rcpp::wrap(PrioromegabetC(o, Prior_omegavec_SD));
    return rcpp_result_gen;
END_RCPP
}
// StepbetC
List StepbetC(const double& kappa, const List& z_alpha, const List& z_omega, const double& alpha, const double& salpha, const Nullable<NumericVector>& alphabet, const Nullable<NumericVector>& salphabet, const double& omega, const double& somega, const Nullable<NumericVector>& omegabet, const Nullable<NumericVector>& somegabet, const NumericMatrix& Y, const NumericMatrix& CC, const double& logP, const double& integral, const double& integralrho, const NumericVector& x_left, const NumericVector& x_right, const NumericVector& y_bottom, const NumericVector& y_top, const List& Wpix, const double& AreaW, const double& FScoef, const double& Prior_alpha_mean, const double& Prior_alpha_SD, const double& Prior_omega_mean, const double& Prior_omega_SD, const Nullable<NumericVector>& Prior_alphavec_SD, const Nullable<NumericVector>& Prior_omegavec_SD);
RcppExport SEXP _binspp_StepbetC(SEXP kappaSEXP, SEXP z_alphaSEXP, SEXP z_omegaSEXP, SEXP alphaSEXP, SEXP salphaSEXP, SEXP alphabetSEXP, SEXP salphabetSEXP, SEXP omegaSEXP, SEXP somegaSEXP, SEXP omegabetSEXP, SEXP somegabetSEXP, SEXP YSEXP, SEXP CCSEXP, SEXP logPSEXP, SEXP integralSEXP, SEXP integralrhoSEXP, SEXP x_leftSEXP, SEXP x_rightSEXP, SEXP y_bottomSEXP, SEXP y_topSEXP, SEXP WpixSEXP, SEXP AreaWSEXP, SEXP FScoefSEXP, SEXP Prior_alpha_meanSEXP, SEXP Prior_alpha_SDSEXP, SEXP Prior_omega_meanSEXP, SEXP Prior_omega_SDSEXP, SEXP Prior_alphavec_SDSEXP, SEXP Prior_omegavec_SDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const List& >::type z_alpha(z_alphaSEXP);
    Rcpp::traits::input_parameter< const List& >::type z_omega(z_omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type salpha(salphaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type salphabet(salphabetSEXP);
    Rcpp::traits::input_parameter< const double& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type somega(somegaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type omegabet(omegabetSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type somegabet(somegabetSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< const double& >::type logP(logPSEXP);
    Rcpp::traits::input_parameter< const double& >::type integral(integralSEXP);
    Rcpp::traits::input_parameter< const double& >::type integralrho(integralrhoSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_left(x_leftSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_right(x_rightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y_bottom(y_bottomSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y_top(y_topSEXP);
    Rcpp::traits::input_parameter< const List& >::type Wpix(WpixSEXP);
    Rcpp::traits::input_parameter< const double& >::type AreaW(AreaWSEXP);
    Rcpp::traits::input_parameter< const double& >::type FScoef(FScoefSEXP);
    Rcpp::traits::input_parameter< const double& >::type Prior_alpha_mean(Prior_alpha_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type Prior_alpha_SD(Prior_alpha_SDSEXP);
    Rcpp::traits::input_parameter< const double& >::type Prior_omega_mean(Prior_omega_meanSEXP);
    Rcpp::traits::input_parameter< const double& >::type Prior_omega_SD(Prior_omega_SDSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type Prior_alphavec_SD(Prior_alphavec_SDSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type Prior_omegavec_SD(Prior_omegavec_SDSEXP);
    rcpp_result_gen = Rcpp::wrap(StepbetC(kappa, z_alpha, z_omega, alpha, salpha, alphabet, salphabet, omega, somega, omegabet, somegabet, Y, CC, logP, integral, integralrho, x_left, x_right, y_bottom, y_top, Wpix, AreaW, FScoef, Prior_alpha_mean, Prior_alpha_SD, Prior_omega_mean, Prior_omega_SD, Prior_alphavec_SD, Prior_omegavec_SD));
    return rcpp_result_gen;
END_RCPP
}
// row_add
NumericMatrix row_add(const NumericMatrix& x, const NumericVector& extraRow);
RcppExport SEXP _binspp_row_add(SEXP xSEXP, SEXP extraRowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type extraRow(extraRowSEXP);
    rcpp_result_gen = Rcpp::wrap(row_add(x, extraRow));
    return rcpp_result_gen;
END_RCPP
}
// rand_int
int rand_int(const int& min, const int& max);
RcppExport SEXP _binspp_rand_int(SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const int& >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(rand_int(min, max));
    return rcpp_result_gen;
END_RCPP
}
// StepMovePointC
List StepMovePointC(const double& kappa, const List& z_alpha, const List& z_omega, const double& alpha, const Nullable<NumericVector>& alphabet, const double& omega, const Nullable<NumericVector>& omegabet, const NumericMatrix& Y, const NumericMatrix& CC, const double& logP, const double& integral, const double& integralrho, const NumericVector& x_left, const NumericVector& x_right, const NumericVector& y_bottom, const NumericVector& y_top, const double& AreaW, const NumericVector& NewCenter);
RcppExport SEXP _binspp_StepMovePointC(SEXP kappaSEXP, SEXP z_alphaSEXP, SEXP z_omegaSEXP, SEXP alphaSEXP, SEXP alphabetSEXP, SEXP omegaSEXP, SEXP omegabetSEXP, SEXP YSEXP, SEXP CCSEXP, SEXP logPSEXP, SEXP integralSEXP, SEXP integralrhoSEXP, SEXP x_leftSEXP, SEXP x_rightSEXP, SEXP y_bottomSEXP, SEXP y_topSEXP, SEXP AreaWSEXP, SEXP NewCenterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const List& >::type z_alpha(z_alphaSEXP);
    Rcpp::traits::input_parameter< const List& >::type z_omega(z_omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type alphabet(alphabetSEXP);
    Rcpp::traits::input_parameter< const double& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const Nullable<NumericVector>& >::type omegabet(omegabetSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< const double& >::type logP(logPSEXP);
    Rcpp::traits::input_parameter< const double& >::type integral(integralSEXP);
    Rcpp::traits::input_parameter< const double& >::type integralrho(integralrhoSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_left(x_leftSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type x_right(x_rightSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y_bottom(y_bottomSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y_top(y_topSEXP);
    Rcpp::traits::input_parameter< const double& >::type AreaW(AreaWSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type NewCenter(NewCenterSEXP);
    rcpp_result_gen = Rcpp::wrap(StepMovePointC(kappa, z_alpha, z_omega, alpha, alphabet, omega, omegabet, Y, CC, logP, integral, integralrho, x_left, x_right, y_bottom, y_top, AreaW, NewCenter));
    return rcpp_result_gen;
END_RCPP
}
// dgenpois_cpp
NumericVector dgenpois_cpp(NumericVector x, double lambda, double theta, bool log_ret);
RcppExport SEXP _binspp_dgenpois_cpp(SEXP xSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP log_retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_ret(log_retSEXP);
    rcpp_result_gen = Rcpp::wrap(dgenpois_cpp(x, lambda, theta, log_ret));
    return rcpp_result_gen;
END_RCPP
}
// dgp_comp_cpp
NumericVector dgp_comp_cpp(double lambda, double theta);
RcppExport SEXP _binspp_dgp_comp_cpp(SEXP lambdaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(dgp_comp_cpp(lambda, theta));
    return rcpp_result_gen;
END_RCPP
}
// dgenpoisbin_cpp
NumericVector dgenpoisbin_cpp(IntegerVector x, double lambda, double theta, NumericVector mu, NumericVector dgp);
RcppExport SEXP _binspp_dgenpoisbin_cpp(SEXP xSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP muSEXP, SEXP dgpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    rcpp_result_gen = Rcpp::wrap(dgenpoisbin_cpp(x, lambda, theta, mu, dgp));
    return rcpp_result_gen;
END_RCPP
}
// intfun_cols_cpp
NumericVector intfun_cols_cpp(NumericMatrix c, double omega, NumericVector xr, NumericVector yr);
RcppExport SEXP _binspp_intfun_cols_cpp(SEXP cSEXP, SEXP omegaSEXP, SEXP xrSEXP, SEXP yrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yr(yrSEXP);
    rcpp_result_gen = Rcpp::wrap(intfun_cols_cpp(c, omega, xr, yr));
    return rcpp_result_gen;
END_RCPP
}
// intfun_cpp
double intfun_cpp(NumericVector c, double omega, NumericVector xr, NumericVector yr);
RcppExport SEXP _binspp_intfun_cpp(SEXP cSEXP, SEXP omegaSEXP, SEXP xrSEXP, SEXP yrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yr(yrSEXP);
    rcpp_result_gen = Rcpp::wrap(intfun_cpp(c, omega, xr, yr));
    return rcpp_result_gen;
END_RCPP
}
// r_omega_cpp
double r_omega_cpp(double ostar, double omega, List X, List C, double lambda, double theta, NumericVector dgp, double a_omega, double b_omega);
RcppExport SEXP _binspp_r_omega_cpp(SEXP ostarSEXP, SEXP omegaSEXP, SEXP XSEXP, SEXP CSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP dgpSEXP, SEXP a_omegaSEXP, SEXP b_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ostar(ostarSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< double >::type a_omega(a_omegaSEXP);
    Rcpp::traits::input_parameter< double >::type b_omega(b_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(r_omega_cpp(ostar, omega, X, C, lambda, theta, dgp, a_omega, b_omega));
    return rcpp_result_gen;
END_RCPP
}
// r_lt_cpp
double r_lt_cpp(double lstar, double tstar, double lambda, double theta, double dl, List X, List C, double omega, NumericVector dgp, NumericVector dgpstar, double l_lambda, double u_lambda, double a_theta, double b_theta);
RcppExport SEXP _binspp_r_lt_cpp(SEXP lstarSEXP, SEXP tstarSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP dlSEXP, SEXP XSEXP, SEXP CSEXP, SEXP omegaSEXP, SEXP dgpSEXP, SEXP dgpstarSEXP, SEXP l_lambdaSEXP, SEXP u_lambdaSEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lstar(lstarSEXP);
    Rcpp::traits::input_parameter< double >::type tstar(tstarSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgpstar(dgpstarSEXP);
    Rcpp::traits::input_parameter< double >::type l_lambda(l_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type u_lambda(u_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(r_lt_cpp(lstar, tstar, lambda, theta, dl, X, C, omega, dgp, dgpstar, l_lambda, u_lambda, a_theta, b_theta));
    return rcpp_result_gen;
END_RCPP
}
// r_kappa_cpp
double r_kappa_cpp(double kstar, double kappa, double m, double win_size, double a_kappa, double b_kappa);
RcppExport SEXP _binspp_r_kappa_cpp(SEXP kstarSEXP, SEXP kappaSEXP, SEXP mSEXP, SEXP win_sizeSEXP, SEXP a_kappaSEXP, SEXP b_kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kstar(kstarSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type win_size(win_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type a_kappa(a_kappaSEXP);
    Rcpp::traits::input_parameter< double >::type b_kappa(b_kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(r_kappa_cpp(kstar, kappa, m, win_size, a_kappa, b_kappa));
    return rcpp_result_gen;
END_RCPP
}
// update_omega
double update_omega(double omega, double somega, List X, List& C, double lambda, double theta, NumericVector dgp, double a_omega, double b_omega);
RcppExport SEXP _binspp_update_omega(SEXP omegaSEXP, SEXP somegaSEXP, SEXP XSEXP, SEXP CSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP dgpSEXP, SEXP a_omegaSEXP, SEXP b_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type somega(somegaSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< double >::type a_omega(a_omegaSEXP);
    Rcpp::traits::input_parameter< double >::type b_omega(b_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_omega(omega, somega, X, C, lambda, theta, dgp, a_omega, b_omega));
    return rcpp_result_gen;
END_RCPP
}
// update_lt
NumericVector update_lt(double lambda, double theta, double stheta, double dl, List X, List& C, double omega, NumericVector dgp, double l_lambda, double u_lambda, double a_theta, double b_theta);
RcppExport SEXP _binspp_update_lt(SEXP lambdaSEXP, SEXP thetaSEXP, SEXP sthetaSEXP, SEXP dlSEXP, SEXP XSEXP, SEXP CSEXP, SEXP omegaSEXP, SEXP dgpSEXP, SEXP l_lambdaSEXP, SEXP u_lambdaSEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type stheta(sthetaSEXP);
    Rcpp::traits::input_parameter< double >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< double >::type l_lambda(l_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type u_lambda(u_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_lt(lambda, theta, stheta, dl, X, C, omega, dgp, l_lambda, u_lambda, a_theta, b_theta));
    return rcpp_result_gen;
END_RCPP
}
// update_kappa
double update_kappa(double kappa, double skappa, double m, double win_size, double a_kappa, double b_kappa);
RcppExport SEXP _binspp_update_kappa(SEXP kappaSEXP, SEXP skappaSEXP, SEXP mSEXP, SEXP win_sizeSEXP, SEXP a_kappaSEXP, SEXP b_kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type skappa(skappaSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type win_size(win_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type a_kappa(a_kappaSEXP);
    Rcpp::traits::input_parameter< double >::type b_kappa(b_kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_kappa(kappa, skappa, m, win_size, a_kappa, b_kappa));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_lt
NumericVector mcmc_lt(double lambda, double theta, double stheta, NumericVector mus, double dl, IntegerVector n, double l_lambda, double u_lambda, double a_theta, double b_theta);
RcppExport SEXP _binspp_mcmc_lt(SEXP lambdaSEXP, SEXP thetaSEXP, SEXP sthetaSEXP, SEXP musSEXP, SEXP dlSEXP, SEXP nSEXP, SEXP l_lambdaSEXP, SEXP u_lambdaSEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type stheta(sthetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mus(musSEXP);
    Rcpp::traits::input_parameter< double >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type l_lambda(l_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type u_lambda(u_lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_lt(lambda, theta, stheta, mus, dl, n, l_lambda, u_lambda, a_theta, b_theta));
    return rcpp_result_gen;
END_RCPP
}
// update_P_cpp
double update_P_cpp(List& X, List& C, double omega, double lambda, double theta, NumericVector mus, NumericVector dgp, double& p_count);
RcppExport SEXP _binspp_update_P_cpp(SEXP XSEXP, SEXP CSEXP, SEXP omegaSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP musSEXP, SEXP dgpSEXP, SEXP p_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< double& >::type p_count(p_countSEXP);
    rcpp_result_gen = Rcpp::wrap(update_P_cpp(X, C, omega, lambda, theta, mus, dgp, p_count));
    return rcpp_result_gen;
END_RCPP
}
// update_P_cpp_n
double update_P_cpp_n(List& X, List& C, double omega, double lambda, double theta, NumericVector mus, NumericVector dgp, int n_upd, double& p_count);
RcppExport SEXP _binspp_update_P_cpp_n(SEXP XSEXP, SEXP CSEXP, SEXP omegaSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP musSEXP, SEXP dgpSEXP, SEXP n_updSEXP, SEXP p_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mus(musSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< int >::type n_upd(n_updSEXP);
    Rcpp::traits::input_parameter< double& >::type p_count(p_countSEXP);
    rcpp_result_gen = Rcpp::wrap(update_P_cpp_n(X, C, omega, lambda, theta, mus, dgp, n_upd, p_count));
    return rcpp_result_gen;
END_RCPP
}
// move_C_cpp
double move_C_cpp(List X, List& C, double omega, double lambda, double theta, double sd_c, NumericVector dgp, double& m_count);
RcppExport SEXP _binspp_move_C_cpp(SEXP XSEXP, SEXP CSEXP, SEXP omegaSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP sd_cSEXP, SEXP dgpSEXP, SEXP m_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sd_c(sd_cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< double& >::type m_count(m_countSEXP);
    rcpp_result_gen = Rcpp::wrap(move_C_cpp(X, C, omega, lambda, theta, sd_c, dgp, m_count));
    return rcpp_result_gen;
END_RCPP
}
// c_birth_cpp
double c_birth_cpp(List& X, List& C, double kappa, double omega, double lambda, double theta, double s_birth, NumericVector dgp, double& b_count);
RcppExport SEXP _binspp_c_birth_cpp(SEXP XSEXP, SEXP CSEXP, SEXP kappaSEXP, SEXP omegaSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP s_birthSEXP, SEXP dgpSEXP, SEXP b_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type s_birth(s_birthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< double& >::type b_count(b_countSEXP);
    rcpp_result_gen = Rcpp::wrap(c_birth_cpp(X, C, kappa, omega, lambda, theta, s_birth, dgp, b_count));
    return rcpp_result_gen;
END_RCPP
}
// c_death_cpp
double c_death_cpp(List& X, List& C, double kappa, double omega, double lambda, double theta, double s_birth, NumericVector dgp, double& d_count);
RcppExport SEXP _binspp_c_death_cpp(SEXP XSEXP, SEXP CSEXP, SEXP kappaSEXP, SEXP omegaSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP s_birthSEXP, SEXP dgpSEXP, SEXP d_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type s_birth(s_birthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dgp(dgpSEXP);
    Rcpp::traits::input_parameter< double& >::type d_count(d_countSEXP);
    rcpp_result_gen = Rcpp::wrap(c_death_cpp(X, C, kappa, omega, lambda, theta, s_birth, dgp, d_count));
    return rcpp_result_gen;
END_RCPP
}
// bdm
void bdm(List& X, List& C, double ktmp, double otmp, double ltmp, double ttmp, double smove, double sbirth, int n_bdm, double& m_count, double& b_count, double& d_count);
RcppExport SEXP _binspp_bdm(SEXP XSEXP, SEXP CSEXP, SEXP ktmpSEXP, SEXP otmpSEXP, SEXP ltmpSEXP, SEXP ttmpSEXP, SEXP smoveSEXP, SEXP sbirthSEXP, SEXP n_bdmSEXP, SEXP m_countSEXP, SEXP b_countSEXP, SEXP d_countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type ktmp(ktmpSEXP);
    Rcpp::traits::input_parameter< double >::type otmp(otmpSEXP);
    Rcpp::traits::input_parameter< double >::type ltmp(ltmpSEXP);
    Rcpp::traits::input_parameter< double >::type ttmp(ttmpSEXP);
    Rcpp::traits::input_parameter< double >::type smove(smoveSEXP);
    Rcpp::traits::input_parameter< double >::type sbirth(sbirthSEXP);
    Rcpp::traits::input_parameter< int >::type n_bdm(n_bdmSEXP);
    Rcpp::traits::input_parameter< double& >::type m_count(m_countSEXP);
    Rcpp::traits::input_parameter< double& >::type b_count(b_countSEXP);
    Rcpp::traits::input_parameter< double& >::type d_count(d_countSEXP);
    bdm(X, C, ktmp, otmp, ltmp, ttmp, smove, sbirth, n_bdm, m_count, b_count, d_count);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_binspp_addMat", (DL_FUNC) &_binspp_addMat, 2},
    {"_binspp_multMat", (DL_FUNC) &_binspp_multMat, 2},
    {"_binspp_intalphaC", (DL_FUNC) &_binspp_intalphaC, 4},
    {"_binspp_aozC", (DL_FUNC) &_binspp_aozC, 4},
    {"_binspp_logpXCbetC", (DL_FUNC) &_binspp_logpXCbetC, 10},
    {"_binspp_KumulaVsechC", (DL_FUNC) &_binspp_KumulaVsechC, 11},
    {"_binspp_PrioralphaC", (DL_FUNC) &_binspp_PrioralphaC, 3},
    {"_binspp_PrioromegaC", (DL_FUNC) &_binspp_PrioromegaC, 3},
    {"_binspp_PrioralphabetC", (DL_FUNC) &_binspp_PrioralphabetC, 2},
    {"_binspp_PrioromegabetC", (DL_FUNC) &_binspp_PrioromegabetC, 2},
    {"_binspp_StepbetC", (DL_FUNC) &_binspp_StepbetC, 29},
    {"_binspp_row_add", (DL_FUNC) &_binspp_row_add, 2},
    {"_binspp_rand_int", (DL_FUNC) &_binspp_rand_int, 2},
    {"_binspp_StepMovePointC", (DL_FUNC) &_binspp_StepMovePointC, 18},
    {"_binspp_dgenpois_cpp", (DL_FUNC) &_binspp_dgenpois_cpp, 4},
    {"_binspp_dgp_comp_cpp", (DL_FUNC) &_binspp_dgp_comp_cpp, 2},
    {"_binspp_dgenpoisbin_cpp", (DL_FUNC) &_binspp_dgenpoisbin_cpp, 5},
    {"_binspp_intfun_cols_cpp", (DL_FUNC) &_binspp_intfun_cols_cpp, 4},
    {"_binspp_intfun_cpp", (DL_FUNC) &_binspp_intfun_cpp, 4},
    {"_binspp_r_omega_cpp", (DL_FUNC) &_binspp_r_omega_cpp, 9},
    {"_binspp_r_lt_cpp", (DL_FUNC) &_binspp_r_lt_cpp, 14},
    {"_binspp_r_kappa_cpp", (DL_FUNC) &_binspp_r_kappa_cpp, 6},
    {"_binspp_update_omega", (DL_FUNC) &_binspp_update_omega, 9},
    {"_binspp_update_lt", (DL_FUNC) &_binspp_update_lt, 12},
    {"_binspp_update_kappa", (DL_FUNC) &_binspp_update_kappa, 6},
    {"_binspp_mcmc_lt", (DL_FUNC) &_binspp_mcmc_lt, 10},
    {"_binspp_update_P_cpp", (DL_FUNC) &_binspp_update_P_cpp, 8},
    {"_binspp_update_P_cpp_n", (DL_FUNC) &_binspp_update_P_cpp_n, 9},
    {"_binspp_move_C_cpp", (DL_FUNC) &_binspp_move_C_cpp, 8},
    {"_binspp_c_birth_cpp", (DL_FUNC) &_binspp_c_birth_cpp, 9},
    {"_binspp_c_death_cpp", (DL_FUNC) &_binspp_c_death_cpp, 9},
    {"_binspp_bdm", (DL_FUNC) &_binspp_bdm, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_binspp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
